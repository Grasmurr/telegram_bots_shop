from sqlite3 import OperationalError

import aiogram.types
from aiogram import executor, types, Bot, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.markdown import text, bold
import requests
import asyncio
import aiosqlite
from config import token


class Form(StatesGroup):
    communication_with_operator = State()
    answer_to_users_question = State()
    add_bot_name = State()
    bot_description = State()
    bot_photo = State()
    finish_bot = State()
    bot_functions = State()
    cost_of_bot = State()



bot = Bot(token)
dp = Dispatcher(bot=bot, storage=MemoryStorage())

global name
global description
global photo_path
global photo_id
global number_of_the_bot
global functions
global cost_of_the_bot
number_of_the_bot = 0


@dp.message_handler(commands=['start'])
async def startmessage(message: Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = KeyboardButton('–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Çüç±')
    button2 = KeyboardButton('–ü–æ—á–µ–º—É –º—ã‚ùìÔ∏è')
    button2_5 = KeyboardButton('–ß—Ç–æ –º—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º?')
    button3 = KeyboardButton('–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º?')
    button4 = KeyboardButton('–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º')
    markup.add(button1, button2)
    markup.add(button2_5)
    markup.add(button3)
    markup.add(button4)
    await bot.send_photo(chat_id=message.chat.id,
                         photo=open('photos/Grasmurr_minimalistic_logo_with_mountains_on_a_'
                                    'white_background_2427829a-beaf-4eec-93a5-e2573e01428b.png', 'rb'),
                         caption=f'{message.from_user.first_name}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –±–æ—Ç–æ–≤ '
                                 f'Grasmurr Shop Bots.\n\n'
                                 f'–ß–µ—Ä–µ–∑ –Ω–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –±–æ—Ç–æ–≤, '
                                 f'–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É –æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ '
                                 f'–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –≤–∞—à–∏ –ø—Ä–æ–¥–∞–∂–∏', reply_markup=markup)


@dp.message_handler(commands=['addbotforexample', 'deletebot'])
async def startmessage(message: Message):
    if message.text == '/addbotforexample':
        await bot.send_message(text='–•–æ—Ä–æ—à–æ! –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞:', chat_id=message.chat.id)
        await Form.add_bot_name.set()
    elif message.text == '/deletebot':
        async with aiosqlite.connect('database.db') as conn:
            cur = await conn.cursor()
            await cur.execute(f'SELECT * FROM bots')
            await conn.commit()
            rows = await cur.fetchall()
            rows = [list(i) for i in rows]
        markup = InlineKeyboardMarkup()
        m = ''
        n = 1
        buttons = []
        for i in rows:
            m += f'{n}. '
            m += i[0]
            m += '\n\n'
            buttons.append(InlineKeyboardButton(text=f'{n}', callback_data=f'{n}deletebot'))
            n += 1
        for i in buttons:
            markup.add(i)

        await bot.send_message(chat_id=message.chat.id, text=f'–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–æ–º–µ—Ä –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: \n\n{m}', reply_markup=markup)


@dp.message_handler(content_types=['text'])
async def messagebuttons(message: Message):
    global photo_id
    if message.text == '–ü–æ—á–µ–º—É –º—ã‚ùìÔ∏è':
        await bot.send_message(chat_id=message.chat.id,
                               text='–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, '
                                    '–∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º.\n\n'
                                    '–ù–∞—à–∏–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è:\n\n'
                                    '‚Äî> –ë–æ–ª—å—à–æ–π –æ–ø—ã—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∑–Ω–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–Ω–∫–æ—Å—Ç–µ–π, '
                                    '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–≤\n\n'
                                    '‚Äî> –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ –≤—Å–µ–º –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º\n\n'
                                    '‚Äî> –ë–æ–ª—å—à–æ–π —Å–ø–µ–∫—Ç—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö —É—Å–ª—É–≥\n\n'
                                    '‚Äî> –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω—É–∂–¥\n\n'
                                    '‚Äî> –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–º–µ—é—Ç –ø—Ä–æ—Å—Ç–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ, '
                                    '–∑–∞—Ä–∞–Ω–µ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–Ω—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –±—é–¥–∂–µ—Ç\n\n'
                                    '‚Äî> –î–æ–≤–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞, —Ä–∞–±–æ—Ç–∞—è ‚Äú–ø–æ–¥ –∫–ª—é—á‚Äù, '
                                    '–Ω–æ –æ—Å—Ç–∞–≤–∞—è—Å—å –≥–∏–±–∫–∏–º–∏ –¥–ª—è –ø—Ä–∞–≤–æ–∫.')

    elif message.text == '–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º':
        markup = InlineKeyboardMarkup()
        button1 = InlineKeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞', callback_data='communication')
        markup.add(button1)

        await bot.send_message(chat_id=message.chat.id,
                               text='–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∞–¥–º–∏–Ω—É –†–æ–º–∞–Ω—É –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '
                                    '+79670282821. –ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ Whatsapp –ø–æ –Ω–µ–º—É. \n\n–¢–∞–∫–∂–µ, '
                                    '—É –Ω–∞—Å –µ—Å—Ç—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Å–∞–º–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–µ: @Grasmurr.'
                                    ' \n\n–ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã'
                                    ' —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞',
                               reply_markup=markup)
    elif message.text == '–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º?':
        await bot.send_message(chat_id=message.chat.id,
                               text='''–û–±—ã—á–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n1Ô∏è‚É£ –í—Å—Ç—Ä–µ—á–∞ —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º

–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –≤ —Å–µ—Ç–∏, –ª–∏–±–æ –ª–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞. –ú—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –í–∞—à –ø—Ä–æ–µ–∫—Ç, –∑–∞–∫—Ä–æ–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã, –¥–æ–ø–æ–ª–Ω–∏–º –µ–≥–æ, –ø–æ–ª—å–∑—É—è—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º. –ú—ã —Å—Ä–∞–∑—É –∂–µ –æ–±–æ–∑–Ω–∞—á–∏–º —Ç–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞.

2Ô∏è‚É£ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¢–ó

–î–ª—è –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ - –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É—è—Å—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å —ç—Ç–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º. –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ - –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ.

3Ô∏è‚É£ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞

–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—é—Ç –≤–∞—à –ø—Ä–æ–µ–∫—Ç. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º, –ø–æ–ª—å–∑—É—è—Å—å –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º–∏ —è–∑—ã–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–≤—è–∑–∫–µ —Å –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏, —á—Ç–æ –¥–∞—Å—Ç –í–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ–µ–∫—Ç–∞.

4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–ü–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π –ø—Ä–æ–µ–∫—Ç–∞ –º—ã –ø–µ–¥–∞–Ω—Ç–∏—á–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç, –∏—Å–∫–ª—é—á–∏–≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –±–µ—Å—Å—Ä–æ—á–Ω—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é.

5Ô∏è‚É£ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –û–û–û "TimeWeb" —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Ö–æ—Å—Ç–∏–Ω–≥–∞ 200 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü.

6Ô∏è‚É£ –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ú—ã –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–π –Ω–æ–≥–µ —Å –ó–∞–∫–∞–∑—á–∏–∫–æ–º, –±—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä—É—è –Ω–∞ –µ–≥–æ –ø—Ä–æ—Å—å–±—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ –º–µ—Ä–µ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏.''')

    elif message.text == '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Çüç±':
        global number_of_the_bot
        number_of_the_bot = 0
        async with aiosqlite.connect('database.db') as conn:
            cur = await conn.cursor()
            await cur.execute(f'SELECT * FROM bots')
            await conn.commit()
            rows = await cur.fetchall()
            rows = [list(i) for i in rows]

        await bot.send_message(chat_id=message.chat.id, text='–ü—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–±–æ—Ç:')
        photo_message = await bot.send_photo(chat_id=message.chat.id, photo=open(rows[0][4], 'rb'))
        photo_id = photo_message.message_id
        markup = InlineKeyboardMarkup()
        button1 = InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞', callback_data='nextbot')
        button2 = InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', callback_data='aboutbot')
        button3 = InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–π', callback_data='orderthebot')
        markup.add(button1)
        markup.add(button2, button3)
        await bot.send_message(chat_id=message.chat.id, text=f'{rows[0][0]}\n\n{rows[0][1]}', reply_markup=markup)

    elif message.text == '–ß—Ç–æ –º—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º?':
        await bot.send_message(chat_id=message.chat.id, text='''–ú—ã –º–æ–∂–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç–æ–≤ –¥–ª—è —Ç–∞–∫–∏—Ö –∑–∞–¥–∞—á, –∫–∞–∫:
        
- –î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ / —Ü–≤–µ—Ç–æ–≤ / –µ–¥—ã

- –ß–∞—Ç-–±–æ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Å–∞–π—Ç–æ–º –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤, –ø–æ–∫–∞–∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ (html, Css, JavaScript, React)

- –û–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω —Å –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –æ–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–æ–π

- –û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è

- –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∏ –ø—Ä–æ–¥–∞–∂–∏ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ 

- FAQ –≤–æ–ø—Ä–æ—Å—ã / –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

- –í–µ–±–∏–Ω–∞—Ä–Ω—ã–π —á–∞—Ç-–±–æ—Ç (–ø—Ä–æ–≥—Ä–µ–≤, –∑–∞–ø–∏—Å—å, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤)

- –§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –≤—ã–¥–∞—á–µ–π –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

- –í–∏–∑–∏—Ç–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –≤–∞–º –Ω–∞ –ø—Ä–∏–µ–º / –∑–∞–Ω—è—Ç–∏–µ / –≤—Å—Ç—Ä–µ—á—É

- –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é –∏ –∑–∞–∫–∞–∑ –≤ –∫–∞—Ñ–µ / —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ

- –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏

- –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–∫–∏ –∏ –±–æ–Ω—É—Å—ã

- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –º–µ—Å—Ç–∞

- –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—Å–µ–π –±–∞–∑–µ –≤ —á–∞—Ç-–±–æ—Ç–µ

- –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –≤–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏

- –ê–≤—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —É—Å–ª—É–≥–µ

- –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ''')
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = KeyboardButton('–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Çüç±')
        button2 = KeyboardButton('–ü–æ—á–µ–º—É –º—ã‚ùìÔ∏è')
        button2_5 = KeyboardButton('–ß—Ç–æ –º—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º?')
        button3 = KeyboardButton('–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º?')
        button4 = KeyboardButton('–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º')
        markup.add(button1, button2)
        markup.add(button2_5)
        markup.add(button3)
        markup.add(button4)

        await bot.send_message(
            text='–•–æ—Ä–æ—à–æ! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!',
            chat_id=message.chat.id, reply_markup=markup)


@dp.callback_query_handler(lambda c: True)
async def inline_buttons(call: types.CallbackQuery):
    req = call.data
    global photo_id
    global id_of_the_user_to_answer
    global id_of_the_message_to_delete_while_answering
    global number_of_the_bot
    if req == 'communication':
        await bot.edit_message_text(text='–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.'
                                    ' –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ:', chat_id=call.message.chat.id, message_id=call.message.message_id)

        await Form.communication_with_operator.set()
    elif req[-20:] == 'answertousersqustion':
        id_of_the_user_to_answer = int(req[:-20])
        id_of_the_message_to_delete_while_answering = call.message.message_id
        await bot.send_message(text='–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –æ—Ç–≤–µ—Ç–æ–º:', chat_id=call.message.chat.id)
        await Form.answer_to_users_question.set()

    elif req == 'savethebot':
        await bot.delete_message(message_id=call.message.message_id, chat_id=call.message.chat.id)
        await bot.send_message(chat_id=call.message.chat.id, text='–£—Å–ø–µ—à–Ω–æ!')

        async with aiosqlite.connect('database.db') as conn:
            cur = await conn.cursor()
            await cur.execute(
                f'''CREATE TABLE IF NOT EXISTS bots
                    (name TEXT, description TEXT, functions TEXT, cost INT, photo TEXT)''')
            await conn.commit()
            await cur.execute(f'''INSERT OR IGNORE INTO bots (name, description, functions, cost, photo) 
                                  VALUES (?, ?, ?, ?, ?)''', (name, description, functions, cost_of_the_bot, photo_path))
            await conn.commit()

    elif req in ['nextbot', 'previousbot']:
        async with aiosqlite.connect('database.db') as conn:
            cur = await conn.cursor()
            await cur.execute(f'SELECT * FROM bots')
            await conn.commit()
            rows = await cur.fetchall()
            rows = [list(i) for i in rows]


        markup = InlineKeyboardMarkup()
        button0 = InlineKeyboardButton(text='–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–∞–±–æ—Ç–∞', callback_data='previousbot')
        button1 = InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞', callback_data='nextbot')
        button2 = InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', callback_data=f'{number_of_the_bot}aboutbot')
        button3 = InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–π', callback_data=f'{number_of_the_bot}orderthebot')
        if req == 'nextbot':
            number_of_the_bot += 1

        elif req == 'previousbot':
            number_of_the_bot -= 1

        if number_of_the_bot == len(rows) - 1:
            markup.add(button0)
            markup.add(button2, button3)
        elif number_of_the_bot == 0:
            markup.add(button1)
            markup.add(button2, button3)
        else:
            markup.add(button0, button1)
            markup.add(button2, button3)

        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text=f'{rows[number_of_the_bot][0]}\n\n{rows[number_of_the_bot][1]}',
                                    reply_markup=markup)
        await bot.edit_message_media(chat_id=call.message.chat.id, message_id=photo_id,
                                     media=types.InputMediaPhoto(media=open(f'{rows[number_of_the_bot][4]}', 'rb')))
    elif req[-9:] == 'deletebot':
        async with aiosqlite.connect('database.db') as conn:
            cur = await conn.cursor()
            await cur.execute(f'SELECT * FROM bots')
            await conn.commit()
            rows = await cur.fetchall()
            rows = [list(i) for i in rows]

        bot_to_delete = req[:-9]
        print(bot_to_delete)
        markup = InlineKeyboardMarkup()
        button1 = InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=f'{bot_to_delete}finaldelete')
        button2 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='Cancel')
        markup.add(button1, button2)
        await bot.edit_message_text(text=f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ {rows[int(bot_to_delete) - 1][0]}',
                               chat_id=call.message.chat.id, reply_markup=markup, message_id=call.message.message_id)

    elif req[-11:] == 'finaldelete':
        bot_to_delete = req[:-11]
        async with aiosqlite.connect('database.db') as conn:
            cur = await conn.cursor()
            await cur.execute(f'SELECT * FROM bots')
            await conn.commit()
            rows = await cur.fetchall()
            rows = [list(i) for i in rows]
            name_of_deleting_bot = rows[int(bot_to_delete) - 1][0]
            await cur.execute(f'DELETE FROM bots WHERE name = ?', (name_of_deleting_bot, ))
            await conn.commit()
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id, text='–£—Å–ø–µ—à–Ω–æ!')

    elif req[-8:] == 'aboutbot':
        global the_bot_to_print_about
        the_bot_to_print_about = number_of_the_bot
        async with aiosqlite.connect('database.db') as conn:
            cur = await conn.cursor()
            await cur.execute(f'SELECT * FROM bots')
            await conn.commit()
            rows = await cur.fetchall()
            rows = [list(i) for i in rows]
            the_bot_to_print_about = rows[the_bot_to_print_about]

        markup = InlineKeyboardMarkup()
        button1 = InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞', callback_data='orderthebot')
        button2 = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')

        markup.add(button1)
        markup.add(button2)

        cost = text(bold(f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞: –æ—Ç {the_bot_to_print_about[3]} —Ä—É–±'))
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                               text=f'–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–π:  \n\n{the_bot_to_print_about[2]}\n\n\n' + cost + '.',
                                    parse_mode=types.ParseMode.MARKDOWN, reply_markup=markup)

    elif req[-11:] == 'orderthebot':
        the_bot_to_order = number_of_the_bot

        async with aiosqlite.connect('database.db') as conn:
            cur = await conn.cursor()
            await cur.execute(f'SELECT * FROM bots')
            await conn.commit()
            rows = await cur.fetchall()
            rows = [list(i) for i in rows]

            the_bot_to_print_about = rows[the_bot_to_order]



        markup = InlineKeyboardMarkup()
        button1 = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
        button2 = InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='continueorder')

        markup.add(button1)
        markup.add(button2)

        cost = text(bold(f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞: –æ—Ç {the_bot_to_print_about[3]} —Ä—É–±'))
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f'–•–æ—Ä–æ—à–æ! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–æ–≥ –±–æ—Ç–∞: {the_bot_to_print_about[0]}\n\n' + cost + '.',
                                    parse_mode=types.ParseMode.MARKDOWN, reply_markup=markup)

    elif req == 'back':
        async with aiosqlite.connect('database.db') as conn:
            cur = await conn.cursor()
            await cur.execute(f'SELECT * FROM bots')
            await conn.commit()
            rows = await cur.fetchall()
            rows = [list(i) for i in rows]

        markup = InlineKeyboardMarkup()
        button0 = InlineKeyboardButton(text='–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–∞–±–æ—Ç–∞', callback_data='previousbot')
        button1 = InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞', callback_data='nextbot')
        button2 = InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', callback_data=f'{number_of_the_bot}aboutbot')
        button3 = InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–π', callback_data=f'{number_of_the_bot}orderthebot')

        if number_of_the_bot == len(rows) - 1:
            markup.add(button0)
            markup.add(button2, button3)
        elif number_of_the_bot == 0:
            markup.add(button1)
            markup.add(button2, button3)
        else:
            markup.add(button0, button1)
            markup.add(button2, button3)
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    text=f'{rows[number_of_the_bot][0]}\n\n{rows[number_of_the_bot][1]}',
                                    message_id=call.message.message_id,
                                    reply_markup=markup)

    elif req == 'continueorder':

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)
        button2 = KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        markup.add(button1)
        markup.add(button2)
        await bot.send_message(text='–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\n'
                                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!',
                               chat_id=call.message.chat.id, reply_markup=markup)



    elif req == 'Cancel':
        await bot.edit_message_text(message_id=call.message.message_id,
                                    chat_id=call.message.chat.id,
                                    text='–•–æ—Ä–æ—à–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É')


@dp.message_handler(content_types=['contact'])
async def phone_number(message: types.Message, state: FSMContext):
    global the_bot_to_print_about
    phone_number = message.contact.phone_number
    await bot.send_message(chat_id=305378717, text=f'–ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {phone_number} –Ω–∞ –±–æ—Ç–∞: {the_bot_to_print_about[0]}')
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = KeyboardButton('–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Çüç±')
    button2 = KeyboardButton('–ü–æ—á–µ–º—É –º—ã‚ùìÔ∏è')
    button2_5 = KeyboardButton('–ß—Ç–æ –º—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º?')
    button3 = KeyboardButton('–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º?')
    button4 = KeyboardButton('–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º')
    markup.add(button1, button2)
    markup.add(button2_5)
    markup.add(button3)
    markup.add(button4)

    await bot.send_message(text='–£—Å–ø–µ—à–Ω–æ! –ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –∑–∞–∫–∞–∑! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!\n\n'
                                '–ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –º–æ–º–µ–Ω—Ç—ã, –∫–∞—Å–∞—é—â–∏–µ—Å—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '
                                '–≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫ –≤–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ whatsapp/telegram –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–≤—è–∑—å—é —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º"',
                           chat_id=message.chat.id, reply_markup=markup)
    await state.finish()


@dp.message_handler(state=Form.communication_with_operator)
async def communication(message: types.Message, state: FSMContext):
    message_to_operator = message.text
    async with aiosqlite.connect('database.db') as conn:
        cur = await conn.cursor()
        await cur.execute(
            f'''CREATE TABLE IF NOT EXISTS questions
                (id TEXT, message TEXT)''')
        await conn.commit()
        await cur.execute(f'INSERT OR IGNORE INTO questions (id, message)'
                          f'VALUES (?, ?)', (message.from_user.id, message_to_operator,))
        await conn.commit()

    markup = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'{message.from_user.id}answertousersqustion')
    markup.add(button1)
    await bot.send_message(chat_id=305378717,
                           text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}\n\n{message_to_operator}',
                           reply_markup=markup)
    await bot.send_message(chat_id=message.chat.id, text='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')

    await state.finish()


@dp.message_handler(state=Form.answer_to_users_question)
async def answer_to_user(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=305378717, message_id=id_of_the_message_to_delete_while_answering)
    message_from_operator = message.text
    await bot.send_message(chat_id=id_of_the_user_to_answer, text=f'–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{message_from_operator}\n\n–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–≤—è–∑–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"')
    await bot.send_message(chat_id=305378717, text='–£—Å–ø–µ—à–Ω–æ!')
    await state.finish()


@dp.message_handler(state=Form.add_bot_name)
async def add_bot_name(message: types.Message, state: FSMContext):
    global name
    name = message.text
    await bot.send_message(chat_id=message.chat.id, text='–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞:')
    await Form.bot_description.set()


@dp.message_handler(state=Form.bot_description)
async def add_bot_name(message: types.Message, state: FSMContext):
    global description
    description = message.text
    await bot.send_message(chat_id=message.chat.id, text=f'–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞:')
    await Form.bot_functions.set()


@dp.message_handler(state=Form.bot_functions)
async def add_bot_name(message: types.Message, state: FSMContext):
    global functions
    functions = message.text
    await bot.send_message(chat_id=message.chat.id, text=f'–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞:')
    await Form.cost_of_bot.set()


@dp.message_handler(state=Form.cost_of_bot)
async def add_bot_cost(message: types.Message):
    global cost_of_the_bot
    cost_of_the_bot = message.text
    await bot.send_message(chat_id=message.chat.id, text=f'–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –±–æ—Ç–∞:')
    await Form.bot_photo.set()


@dp.message_handler(state=Form.bot_photo, content_types=['photo'])
async def add_bot_name(message: types.Message, state: FSMContext):
    global photo_path
    photo = message.photo[-1].file_id
    file = await bot.get_file(photo)
    response = requests.get(f"https://api.telegram.org/file/bot{token}/{file.file_path}")
    with open(f"photos/{file.file_id}.jpg", "wb") as f:
        photo_path = f"photos/{file.file_id}.jpg"
        f.write(response.content)

    await bot.send_message(chat_id=message.chat.id, text=f'–•–æ—Ä–æ—à–æ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—Ç–∞:')

    markup = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='savethebot')
    button2 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='Cancel')
    markup.add(button1)
    markup.add(button2)

    await bot.send_photo(chat_id=message.chat.id, photo=open(photo_path, 'rb'), caption=f'\n{name}\n\n{description}', reply_markup=markup)
    await state.finish()

try:
    print('–ó–∞–ø—É—Å–∫–∞—é—Å—å...')
    executor.start_polling(dp)
except asyncio.TimeoutError as E:
    print('time error, –ø—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å...')
    executor.start_polling(dp)
